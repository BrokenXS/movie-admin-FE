name: CI/CD Backend Local

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run tests
        run: |
          pytest

  build-docker:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Build Docker image
        run: |
          docker build -t movie-admin-be:latest .
      - name: Save Docker image as artifact
        run: |
          docker save movie-admin-be:latest > movie-admin-be.tar
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v3
        with:
          name: movie-admin-be-image
          path: movie-admin-be.tar

  deploy-kind:
    runs-on: ubuntu-latest
    needs: build-docker
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download Docker image artifact
        uses: actions/download-artifact@v3
        with:
          name: movie-admin-be-image
          path: ./
      - name: Install kind and kubectl
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.22.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
      - name: Create kind cluster
        run: |
          kind create cluster --name movie-admin
      - name: Load Docker image into kind
        run: |
          kind load image-archive movie-admin-be.tar --name movie-admin
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/k8s-postgres-pgadmin.yaml
          kubectl apply -f k8s/k8s-backend.yaml
